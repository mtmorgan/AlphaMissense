[{"path":"https://mtmorgan.github.io/AlphaMissense/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Accessing AlphaMissense Resources in R","text":"AlphaMissense publication outlines variant AlphaFold / DeepMind used predict missense variant pathogenicity. Supporting data Zenodo include, instance 70+M variants across hg19 hg38 genome builds. AlphaMissense package allows ready access data, downloading individual files DuckDB databases ready exploration integration R Bioconductor workflows. Install package GitHub, ensuring correct Bioconductor dependencies. Load library. Learn available data visiting Zenodo record data retrieved .","code":"if (!\"BiocManager\" %in% rownames(installed.packages))     install.packages(\"BiocManager\", repos = \"https://cran.r-project.org\")  remotes::install_github(     \"mtmorgan/AlphaMissense\",     repos = BiocManager::repositories() ) library(AlphaMissense) am_browse()"},{"path":"https://mtmorgan.github.io/AlphaMissense/articles/introduction.html","id":"discovery-retrieval-and-use","dir":"Articles","previous_headings":"","what":"Discovery, retrieval and use","title":"Accessing AlphaMissense Resources in R","text":"Use am_available() discover data resources available representation DuckDB databases. cached column initially FALSE data sets; TRUE indicates data set downloaded am_data(), described . available data sets use recent record 25 September, 2023; can changed specifying alternative record= argument changed globally setting environment variable ALPHAMISSENSE_RECORD loading package. Use am_data() download data resource store DuckDB database. key= argument column returned am_available(). Files cached locally (using BiocFileCache) operation expensive first time. record= stored different database. return value tbl table DuckDB database. (read-) connection database available connection remains open throughout session; call db_disconnect(db) close end session. database contains tables key downloaded. alternative am_available() / am_data(), view available tables create dplyr / dbplyr tibble table interest. fast straight-forward summarize data, e.g., number variants assigned pathogenicity class. average pathogenicity score class… number transitions REF ALT nucleotides across variants. straight-forward select variants individual regions interest, e.g., first 200000 nucleoties chromosome 4. sure clean database connection end session done. Database connections closed correctly trigger warning messages.","code":"am_available() #> # A tibble: 7 × 5 #>   record  key                             size cached link                       #>   <chr>   <chr>                          <dbl> <lgl>  <chr>                      #> 1 8360242 aa_substitutions          1207278510 TRUE   https://zenodo.org/api/fi… #> 2 8360242 gene_hg19                     243943 TRUE   https://zenodo.org/api/fi… #> 3 8360242 gene_hg38                     253636 TRUE   https://zenodo.org/api/fi… #> 4 8360242 hg19                       622293310 TRUE   https://zenodo.org/api/fi… #> 5 8360242 hg38                       642961469 TRUE   https://zenodo.org/api/fi… #> 6 8360242 isoforms_aa_substitutions 2461351945 TRUE   https://zenodo.org/api/fi… #> 7 8360242 isoforms_hg38             1177361934 TRUE   https://zenodo.org/api/fi… tbl <- am_data(\"hg38\") tbl #> # Source:   table<hg38> [?? x 10] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>    `#CHROM`   POS REF   ALT   genome uniprot_id transcript_id    protein_variant #>    <chr>    <dbl> <chr> <chr> <chr>  <chr>      <chr>            <chr>           #>  1 chr1     69094 G     T     hg38   Q8NH21     ENST00000335137… V2L             #>  2 chr1     69094 G     C     hg38   Q8NH21     ENST00000335137… V2L             #>  3 chr1     69094 G     A     hg38   Q8NH21     ENST00000335137… V2M             #>  4 chr1     69095 T     C     hg38   Q8NH21     ENST00000335137… V2A             #>  5 chr1     69095 T     A     hg38   Q8NH21     ENST00000335137… V2E             #>  6 chr1     69095 T     G     hg38   Q8NH21     ENST00000335137… V2G             #>  7 chr1     69097 A     G     hg38   Q8NH21     ENST00000335137… T3A             #>  8 chr1     69097 A     C     hg38   Q8NH21     ENST00000335137… T3P             #>  9 chr1     69097 A     T     hg38   Q8NH21     ENST00000335137… T3S             #> 10 chr1     69098 C     A     hg38   Q8NH21     ENST00000335137… T3N             #> # ℹ more rows #> # ℹ 2 more variables: am_pathogenicity <dbl>, am_class <chr> db <- db_connect() db_tables(db) #> [1] \"aa_substitutions\"          \"gene_hg19\"                 #> [3] \"gene_hg38\"                 \"hg19\"                      #> [5] \"hg38\"                      \"isoforms_aa_substitutions\" #> [7] \"isoforms_hg38\"  tbl <- tbl(db, \"hg38\") tbl #> # Source:   table<hg38> [?? x 10] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>    `#CHROM`   POS REF   ALT   genome uniprot_id transcript_id    protein_variant #>    <chr>    <dbl> <chr> <chr> <chr>  <chr>      <chr>            <chr>           #>  1 chr1     69094 G     T     hg38   Q8NH21     ENST00000335137… V2L             #>  2 chr1     69094 G     C     hg38   Q8NH21     ENST00000335137… V2L             #>  3 chr1     69094 G     A     hg38   Q8NH21     ENST00000335137… V2M             #>  4 chr1     69095 T     C     hg38   Q8NH21     ENST00000335137… V2A             #>  5 chr1     69095 T     A     hg38   Q8NH21     ENST00000335137… V2E             #>  6 chr1     69095 T     G     hg38   Q8NH21     ENST00000335137… V2G             #>  7 chr1     69097 A     G     hg38   Q8NH21     ENST00000335137… T3A             #>  8 chr1     69097 A     C     hg38   Q8NH21     ENST00000335137… T3P             #>  9 chr1     69097 A     T     hg38   Q8NH21     ENST00000335137… T3S             #> 10 chr1     69098 C     A     hg38   Q8NH21     ENST00000335137… T3N             #> # ℹ more rows #> # ℹ 2 more variables: am_pathogenicity <dbl>, am_class <chr> tbl |>     count(am_class) #> # Source:   SQL [3 x 2] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>   am_class                 n #>   <chr>                <dbl> #> 1 likely_benign     40917351 #> 2 likely_pathogenic 22770557 #> 3 ambiguous          8009648 tbl |>     group_by(am_class) |>     summarize(n = n(), pathogenecity = mean(am_pathogenicity, na.rm = TRUE)) #> # Source:   SQL [3 x 3] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>   am_class                 n pathogenecity #>   <chr>                <dbl>         <dbl> #> 1 likely_benign     40917351         0.147 #> 2 likely_pathogenic 22770557         0.863 #> 3 ambiguous          8009648         0.444 tbl |>     count(REF, ALT) |>     tidyr::pivot_wider(names_from = \"ALT\", values_from = \"n\") |>     select(REF, A, C, G, T) |>     arrange(REF) #> # Source:     SQL [4 x 5] #> # Database:   DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #> # Ordered by: REF #>   REF         A       C       G       T #>   <chr>   <dbl>   <dbl>   <dbl>   <dbl> #> 1 A          NA 6420083 5449617 5953590 #> 2 C     6183248      NA 6963298 4909869 #> 3 G     4894493 6937258      NA 6161594 #> 4 T     5955039 5445540 6423927      NA tbl |>     filter(`#CHROM` == \"chr4\", POS > 0, POS <= 200000) #> # Source:   SQL [?? x 10] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>    `#CHROM`   POS REF   ALT   genome uniprot_id transcript_id    protein_variant #>    <chr>    <dbl> <chr> <chr> <chr>  <chr>      <chr>            <chr>           #>  1 chr4     59430 G     C     hg38   Q8IYB9     ENST00000610261… E2Q             #>  2 chr4     59430 G     A     hg38   Q8IYB9     ENST00000610261… E2K             #>  3 chr4     59431 A     C     hg38   Q8IYB9     ENST00000610261… E2A             #>  4 chr4     59431 A     G     hg38   Q8IYB9     ENST00000610261… E2G             #>  5 chr4     59431 A     T     hg38   Q8IYB9     ENST00000610261… E2V             #>  6 chr4     59432 A     C     hg38   Q8IYB9     ENST00000610261… E2D             #>  7 chr4     59432 A     T     hg38   Q8IYB9     ENST00000610261… E2D             #>  8 chr4     59433 C     A     hg38   Q8IYB9     ENST00000610261… L3I             #>  9 chr4     59433 C     T     hg38   Q8IYB9     ENST00000610261… L3F             #> 10 chr4     59433 C     G     hg38   Q8IYB9     ENST00000610261… L3V             #> # ℹ more rows #> # ℹ 2 more variables: am_pathogenicity <dbl>, am_class <chr> db_disconnect(db)"},{"path":"https://mtmorgan.github.io/AlphaMissense/articles/introduction.html","id":"working-with-bioconductor","dir":"Articles","previous_headings":"","what":"Working with Bioconductor","title":"Accessing AlphaMissense Resources in R","text":"section illustrates AlphaMissense data can integrated Bioconductor workflows, particularly ensembldb package corresponding AnnotationHub resources. section work directly database, including writing temporary tables. purpose, need connection can read write.","code":"db_rw <- db_connect(read_only = FALSE)"},{"path":"https://mtmorgan.github.io/AlphaMissense/articles/introduction.html","id":"grch38-annotation-resources","dir":"Articles","previous_headings":"Working with Bioconductor","what":"GRCh38 annotation resources","title":"Accessing AlphaMissense Resources in R","text":"Start identifying recent EnsDb resource Homo Sapiens. Load ensembldb library retrieve record. Unfortunately, many conflicts function names different packages, becomes necessary fully resolve functions package defined.","code":"hub <- AnnotationHub::AnnotationHub() AnnotationHub::query(hub, c(\"EnsDb\", \"Homo sapiens\")) #> AnnotationHub with 25 records #> # snapshotDate(): 2023-09-27 #> # $dataprovider: Ensembl #> # $species: Homo sapiens #> # $rdataclass: EnsDb #> # additional mcols(): taxonomyid, genome, description, #> #   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags, #> #   rdatapath, sourceurl, sourcetype  #> # retrieve records with, e.g., 'object[[\"AH53211\"]]'  #>  #>              title                              #>   AH53211  | Ensembl 87 EnsDb for Homo Sapiens  #>   AH53715  | Ensembl 88 EnsDb for Homo Sapiens  #>   AH56681  | Ensembl 89 EnsDb for Homo Sapiens  #>   AH57757  | Ensembl 90 EnsDb for Homo Sapiens  #>   AH60773  | Ensembl 91 EnsDb for Homo Sapiens  #>   ...        ...                                #>   AH100643 | Ensembl 106 EnsDb for Homo sapiens #>   AH104864 | Ensembl 107 EnsDb for Homo sapiens #>   AH109336 | Ensembl 108 EnsDb for Homo sapiens #>   AH109606 | Ensembl 109 EnsDb for Homo sapiens #>   AH113665 | Ensembl 110 EnsDb for Homo sapiens  AnnotationHub::AnnotationHub()[\"AH113665\"] #> AnnotationHub with 1 record #> # snapshotDate(): 2023-09-27 #> # names(): AH113665 #> # $dataprovider: Ensembl #> # $species: Homo sapiens #> # $rdataclass: EnsDb #> # $rdatadateadded: 2023-04-25 #> # $title: Ensembl 110 EnsDb for Homo sapiens #> # $description: Gene and protein annotations for Homo sapiens based on Ensem... #> # $taxonomyid: 9606 #> # $genome: GRCh38 #> # $sourcetype: ensembl #> # $sourceurl: http://www.ensembl.org #> # $sourcesize: NA #> # $tags: c(\"110\", \"Annotation\", \"AnnotationHubSoftware\", \"Coverage\", #> #   \"DataImport\", \"EnsDb\", \"Ensembl\", \"Gene\", \"Protein\", \"Sequencing\", #> #   \"Transcript\")  #> # retrieve record with 'object[[\"AH113665\"]]' library(ensembldb) edb <- AnnotationHub::AnnotationHub()[[\"AH113665\"]] edb #> EnsDb for Ensembl: #> |Backend: SQLite #> |Db type: EnsDb #> |Type of Gene ID: Ensembl Gene ID #> |Supporting package: ensembldb #> |Db created by: ensembldb package from Bioconductor #> |script_version: 0.3.10 #> |Creation time: Mon Aug  7 09:02:07 2023 #> |ensembl_version: 110 #> |ensembl_host: 127.0.0.1 #> |Organism: Homo sapiens #> |taxonomy_id: 9606 #> |genome_build: GRCh38 #> |DBSCHEMAVERSION: 2.2 #> |common_name: human #> |species: homo_sapiens #> | No. of genes: 71440. #> | No. of transcripts: 278545. #> |Protein data available."},{"path":"https://mtmorgan.github.io/AlphaMissense/articles/introduction.html","id":"from-bioconductor-to-duckdb","dir":"Articles","previous_headings":"Working with Bioconductor","what":"From Bioconductor to DuckDB","title":"Accessing AlphaMissense Resources in R","text":"illustration, use ensembldb identify exons canonical transcript particular gene. Munge data tibble, updating seqnames column #CHROM identifiers \"chr1\" (AlphaMissense data). Write tibble temporary table (deleted db disconnected database) can used ‘lazy’ SQL queries AlphaMissense data. temporary table now available db_rw connection; tables removed disconnect, db_disconnect(db_rw). Use db_range_join() join AlphaMissense data ranges defining exons gene interest. arguments database connection, AlphaMissense table interest (table must columns #CHROM POS), table containing ranges interest (columns #CHROM, start, end), temporary table contain results. range join like standard database join, expect constraints can relations, case POS >= start POS <= end range interest; implementation details DuckDB blog. range join uses closed intervals (start end positions included query), following Bioconductor convention. Writing temporary table avoids bringing potentially large datasets R memory, makes table available subsequent manipulation current session. query takes place almost instantly. larger query 71M variants 1000 ranges took 20 seconds. usual database dplyr verbs can used summarize results, e.g., number variants pathogenecity class exon. perhaps instructive review range join (whisker) template source inspiration computations might interest. best practice, disconnect writable database connection work complete.","code":"bcl2l11 <-     edb |>     ensembldb::filter(         ~ symbol == \"BCL2L11\" &             tx_biotype == \"protein_coding\" &             tx_is_canonical == TRUE     ) |>     exonsBy(\"tx\") bcl2l11 #> GRangesList object of length 1: #> $ENST00000393256 #> GRanges object with 4 ranges and 2 metadata columns: #>       seqnames              ranges strand |         exon_id exon_rank #>          <Rle>           <IRanges>  <Rle> |     <character> <integer> #>   [1]        2 111120914-111121188      + | ENSE00004011574         1 #>   [2]        2 111123733-111124139      + | ENSE00001008808         2 #>   [3]        2 111150044-111150147      + | ENSE00003483971         3 #>   [4]        2 111164133-111168444      + | ENSE00001924953         4 #>   ------- #>   seqinfo: 1 sequence from GRCh38 genome bcl2l11_tbl <-     bcl2l11 |>     dplyr::as_tibble() |>     dplyr::mutate(`#CHROM` = paste0(\"chr\", seqnames)) |>     dplyr::select(`#CHROM`, everything(), -seqnames)  db_temporary_table(db_rw, bcl2l11_tbl, \"bcl2l11\") #> # Source:   table<bcl2l11> [4 x 9] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>   `#CHROM` group group_name          start    end width strand exon_id exon_rank #>   <chr>    <int> <chr>               <int>  <int> <int> <fct>  <chr>       <int> #> 1 chr2         1 ENST00000393256 111120914 1.11e8   275 +      ENSE00…         1 #> 2 chr2         1 ENST00000393256 111123733 1.11e8   407 +      ENSE00…         2 #> 3 chr2         1 ENST00000393256 111150044 1.11e8   104 +      ENSE00…         3 #> 4 chr2         1 ENST00000393256 111164133 1.11e8  4312 +      ENSE00…         4 \"bcl2l11\" %in% db_tables(db_rw) #> [1] TRUE rng <- db_range_join(db_rw, \"hg38\", \"bcl2l11\", \"bcl2l11_overlaps\") #> * [21:12:24][info] doing range join of 'hg38' with 'bcl2l11' rng #> # Source:   table<bcl2l11_overlaps> [?? x 18] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>    `#CHROM`      POS REF   ALT   genome uniprot_id transcript_id protein_variant #>    <chr>       <dbl> <chr> <chr> <chr>  <chr>      <chr>         <chr>           #>  1 chr2       1.11e8 G     A     hg38   O43521     ENST00000393… V167I           #>  2 chr2       1.11e8 G     T     hg38   O43521     ENST00000393… V167L           #>  3 chr2       1.11e8 G     C     hg38   O43521     ENST00000393… V167L           #>  4 chr2       1.11e8 T     C     hg38   O43521     ENST00000393… V167A           #>  5 chr2       1.11e8 T     A     hg38   O43521     ENST00000393… V167E           #>  6 chr2       1.11e8 T     G     hg38   O43521     ENST00000393… V167G           #>  7 chr2       1.11e8 T     A     hg38   O43521     ENST00000393… F168I           #>  8 chr2       1.11e8 T     C     hg38   O43521     ENST00000393… F168L           #>  9 chr2       1.11e8 T     G     hg38   O43521     ENST00000393… F168V           #> 10 chr2       1.11e8 T     G     hg38   O43521     ENST00000393… F168C           #> # ℹ more rows #> # ℹ 10 more variables: am_pathogenicity <dbl>, am_class <chr>, group <int>, #> #   group_name <chr>, start <int>, end <int>, width <int>, strand <fct>, #> #   exon_id <chr>, exon_rank <int> rng |>     dplyr::count(exon_id, am_class) |>     tidyr::pivot_wider(names_from = \"am_class\", values_from = \"n\") #> # Source:   SQL [3 x 4] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>   exon_id         likely_benign likely_pathogenic ambiguous #>   <chr>                   <dbl>             <dbl>     <dbl> #> 1 ENSE00001924953           172                16        19 #> 2 ENSE00003483971           128                71        33 #> 3 ENSE00001008808           494               257       108 AlphaMissense:::sql_template(     \"range_join\",     key = \"hg38\", join = \"bcl2l11\", to = \"bcl2l11_overlaps\" ) |> cat(\"\\n\") #> -- range join of 'key' with 'join'; overwrite any existing table 'to' #> DROP TABLE IF EXISTS bcl2l11_overlaps; #> CREATE TEMP TABLE bcl2l11_overlaps AS #> SELECT #>     hg38.*, #>     bcl2l11.* EXCLUDE ('#CHROM') #> FROM hg38 #> JOIN bcl2l11 #>     ON bcl2l11.\"#CHROM\" = hg38.\"#CHROM\" #>     AND bcl2l11.start <= hg38.POS #>     AND bcl2l11.end >= hg38.POS; db_disconnect(db_rw)"},{"path":"https://mtmorgan.github.io/AlphaMissense/articles/introduction.html","id":"from-duckdb-to-bioconductor","dir":"Articles","previous_headings":"Working with Bioconductor","what":"From DuckDB to Bioconductor","title":"Accessing AlphaMissense Resources in R","text":"likely straight-forward ways performing query previous section, e.g., filtering hg38 relevant transcript id(s), retrieving R, working edb classify variants exon. transcript interested \"ENST00000393256\". Select relevant variants , many, load R. Coerce AlphaMissense data GRanges::GPos object. One can use GenomicRanges functionality, e.g., count number variants exon.","code":"variants_of_interest <-     am_data(\"hg38\") |>     dplyr::filter(transcript_id %like% \"ENST00000393256%\") |>     dplyr::collect() gpos <- with(     variants_of_interest,     GPos(         sub(\"chr\", \"\", `#CHROM`), POS, strand = NULL,         REF, ALT, uniprot_id, transcript_id, protein_variant,         am_pathogenicity, am_class     ) ) gpos #> UnstitchedGPos object with 1298 positions and 7 metadata columns: #>          seqnames       pos strand |         REF         ALT  uniprot_id #>             <Rle> <integer>  <Rle> | <character> <character> <character> #>      [1]        2 111123749      * |           G           C      O43521 #>      [2]        2 111123749      * |           G           T      O43521 #>      [3]        2 111123749      * |           G           A      O43521 #>      [4]        2 111123750      * |           C           A      O43521 #>      [5]        2 111123750      * |           C           G      O43521 #>      ...      ...       ...    ... .         ...         ...         ... #>   [1294]        2 111164227      * |           A           G      O43521 #>   [1295]        2 111164227      * |           A           T      O43521 #>   [1296]        2 111164227      * |           A           C      O43521 #>   [1297]        2 111164228      * |           T           A      O43521 #>   [1298]        2 111164228      * |           T           G      O43521 #>              transcript_id protein_variant am_pathogenicity          am_class #>                <character>     <character>        <numeric>       <character> #>      [1] ENST00000393256.8             A2P           0.6610 likely_pathogenic #>      [2] ENST00000393256.8             A2S           0.3398     likely_benign #>      [3] ENST00000393256.8             A2T           0.7219 likely_pathogenic #>      [4] ENST00000393256.8             A2E           0.7283 likely_pathogenic #>      [5] ENST00000393256.8             A2G           0.3883         ambiguous #>      ...               ...             ...              ...               ... #>   [1294] ENST00000393256.8           H198R           0.1226     likely_benign #>   [1295] ENST00000393256.8           H198L           0.2526     likely_benign #>   [1296] ENST00000393256.8           H198P           0.1323     likely_benign #>   [1297] ENST00000393256.8           H198Q           0.1781     likely_benign #>   [1298] ENST00000393256.8           H198Q           0.1781     likely_benign #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths countOverlaps(unlist(bcl2l11), gpos) #> ENST00000393256 ENST00000393256 ENST00000393256 ENST00000393256  #>               0             859             232             207"},{"path":"https://mtmorgan.github.io/AlphaMissense/articles/introduction.html","id":"finally","dir":"Articles","previous_headings":"","what":"Finally","title":"Accessing AlphaMissense Resources in R","text":"Remember disconnect shutdown session-wide DuckDB connection.","code":"db_disconnect()"},{"path":"https://mtmorgan.github.io/AlphaMissense/articles/introduction.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Accessing AlphaMissense Resources in R","text":"","code":"sessionInfo() #> R version 4.3.1 Patched (2023-08-16 r84986) #> Platform: aarch64-apple-darwin21.6.0 (64-bit) #> Running under: macOS Monterey 12.6.8 #>  #> Matrix products: default #> BLAS:   /Users/ma38727/bin/R-4-3-branch/lib/libRblas.dylib  #> LAPACK: /Users/ma38727/bin/R-4-3-branch/lib/libRlapack.dylib;  LAPACK version 3.11.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ensembldb_2.25.1        AnnotationFilter_1.25.0 GenomicFeatures_1.53.2  #>  [4] AnnotationDbi_1.63.2    Biobase_2.61.0          GenomicRanges_1.53.1    #>  [7] GenomeInfoDb_1.37.4     IRanges_2.35.2          S4Vectors_0.39.1        #> [10] BiocGenerics_0.47.0     AlphaMissense_0.0.11    dplyr_1.1.3             #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.1.3                     bitops_1.0-7                  #>   [3] biomaRt_2.57.1                rlang_1.1.1                   #>   [5] magrittr_2.0.3                matrixStats_1.0.0             #>   [7] compiler_4.3.1                RSQLite_2.3.1                 #>   [9] png_0.1-8                     systemfonts_1.0.4             #>  [11] vctrs_0.6.3                   ProtGenerics_1.33.1           #>  [13] stringr_1.5.0                 pkgconfig_2.0.3               #>  [15] crayon_1.5.2                  fastmap_1.1.1                 #>  [17] dbplyr_2.3.3                  XVector_0.41.1                #>  [19] ellipsis_0.3.2                utf8_1.2.3                    #>  [21] Rsamtools_2.17.0              promises_1.2.1                #>  [23] rmarkdown_2.25                ragg_1.2.5                    #>  [25] purrr_1.0.2                   bit_4.0.5                     #>  [27] xfun_0.40                     zlibbioc_1.47.0               #>  [29] cachem_1.0.8                  jsonlite_1.8.7                #>  [31] progress_1.2.2                blob_1.2.4                    #>  [33] later_1.3.1                   DelayedArray_0.27.10          #>  [35] BiocParallel_1.35.4           interactiveDisplayBase_1.39.0 #>  [37] parallel_4.3.1                spdl_0.0.5                    #>  [39] prettyunits_1.1.1             R6_2.5.1                      #>  [41] bslib_0.5.1                   stringi_1.7.12                #>  [43] rtracklayer_1.61.1            jquerylib_0.1.4               #>  [45] Rcpp_1.0.11                   SummarizedExperiment_1.31.1   #>  [47] knitr_1.44                    Matrix_1.6-1.1                #>  [49] httpuv_1.6.11                 tidyselect_1.2.0              #>  [51] abind_1.4-5                   yaml_2.3.7                    #>  [53] codetools_0.2-19              curl_5.0.2                    #>  [55] rjsoncons_1.0.0               lattice_0.21-8                #>  [57] tibble_3.2.1                  shiny_1.7.5                   #>  [59] withr_2.5.1                   KEGGREST_1.41.0               #>  [61] evaluate_0.21                 desc_1.4.2                    #>  [63] BiocFileCache_2.9.1           xml2_1.3.5                    #>  [65] Biostrings_2.69.2             pillar_1.9.0                  #>  [67] BiocManager_1.30.22           filelock_1.0.2                #>  [69] MatrixGenerics_1.13.1         whisker_0.4.1                 #>  [71] generics_0.1.3                rprojroot_2.0.3               #>  [73] RCurl_1.98-1.12               BiocVersion_3.18.0            #>  [75] hms_1.1.3                     xtable_1.8-4                  #>  [77] glue_1.6.2                    lazyeval_0.2.2                #>  [79] tools_4.3.1                   AnnotationHub_3.9.2           #>  [81] BiocIO_1.11.0                 GenomicAlignments_1.37.0      #>  [83] fs_1.6.3                      XML_3.99-0.14                 #>  [85] grid_4.3.1                    tidyr_1.3.0                   #>  [87] GenomeInfoDbData_1.2.10       RcppSpdlog_0.0.14             #>  [89] duckdb_0.8.1-3                restfulr_0.0.15               #>  [91] cli_3.6.1                     rappdirs_0.3.3                #>  [93] textshaping_0.3.6             fansi_1.0.4                   #>  [95] S4Arrays_1.1.6                sass_0.4.7                    #>  [97] digest_0.6.33                 SparseArray_1.1.12            #>  [99] rjson_0.2.21                  memoise_2.0.1                 #> [101] htmltools_0.5.6               pkgdown_2.0.7                 #> [103] lifecycle_1.0.3               httr_1.4.7                    #> [105] mime_0.12                     bit64_4.0.5"},{"path":"https://mtmorgan.github.io/AlphaMissense/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2023). AlphaMissense: Accessing AlphaMissense Resources R. R package version 0.0.11, https://mtmorgan.github.io/AlphaMissense/.","code":"@Manual{,   title = {AlphaMissense: Accessing AlphaMissense Resources in R},   author = {Martin Morgan},   year = {2023},   note = {R package version 0.0.11},   url = {https://mtmorgan.github.io/AlphaMissense/}, }"},{"path":"https://mtmorgan.github.io/AlphaMissense/index.html","id":"alphamissense-for-r--bioconductor","dir":"","previous_headings":"","what":"Accessing AlphaMissense Resources in R","title":"Accessing AlphaMissense Resources in R","text":"AlphaMissense publication outlines variant AlphaFold / DeepMind used predict missense variant pathogenicity. Supporting data Zenodo include, instance 70+M variants across hg19 hg38 genome builds. AlphaMissense package allows ready access data, downloading individual files DuckDB databases ready exploration integration R Bioconductor worksflows.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Accessing AlphaMissense Resources in R","text":"Install package GitHub, ensuring correct Bioconductor dependencies. Load library.","code":"if (!\"BiocManager\" %in% rownames(installed.packages))     install.packages(\"BiocManager\", repos = \"https://cran.r-project.org\")  remotes::install_github(     \"mtmorgan/AlphaMissense\",     repos = BiocManager::repositories() ) library(AlphaMissense)"},{"path":"https://mtmorgan.github.io/AlphaMissense/index.html","id":"next-steps","dir":"","previous_headings":"","what":"Next steps","title":"Accessing AlphaMissense Resources in R","text":"Visit introductory article learn using package.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/AlphaMissense.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve AlphaMissense Resources as DuckDB Databases — ALPHAMISSENSE_RECORD","title":"Retrieve AlphaMissense Resources as DuckDB Databases — ALPHAMISSENSE_RECORD","text":"ALPHAMISSENSE_RECORD constant identifier corresponding default version AlphaMissense resource use. am_browse() opens web browser Zenodo record AlphaMissense data. am_available() reports available datasets record. am_data() retrieves single key AlpahMissense Zenodo site parses file DuckDB database.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/AlphaMissense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve AlphaMissense Resources as DuckDB Databases — ALPHAMISSENSE_RECORD","text":"","code":"ALPHAMISSENSE_RECORD  am_browse(record = ALPHAMISSENSE_RECORD)  am_available(record = ALPHAMISSENSE_RECORD, bfc = BiocFileCache())  am_data(   key,   record = ALPHAMISSENSE_RECORD,   bfc = BiocFileCache(),   as = c(\"tbl\", \"tsv\") )"},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/AlphaMissense.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Retrieve AlphaMissense Resources as DuckDB Databases — ALPHAMISSENSE_RECORD","text":"object class character length 1.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/AlphaMissense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve AlphaMissense Resources as DuckDB Databases — ALPHAMISSENSE_RECORD","text":"record character(1) Zenodo record AlphaMissense data resources. bfc object returned BiocFileCache() representing location downloaded files parsed database stored. default 'global' BiocFileCache. key character(1) 'key' result am_available(), single row tibble returned am_available(). chracter(1) type return value. \"tbl\": dbplyr tbl representation database resource. \"tsv\": path tsv.gz file representing resource downloaded Zenodo","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/AlphaMissense.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve AlphaMissense Resources as DuckDB Databases — ALPHAMISSENSE_RECORD","text":"am_available() returns tibble columns key, size, link. meaning key must determined reference information am_browse(). am_data() returns dbplyr (database) tibble represented downloaded parsed file. Fields database described Zenodo resource page.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/AlphaMissense.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve AlphaMissense Resources as DuckDB Databases — ALPHAMISSENSE_RECORD","text":"ALPHAMISSENSE_RECORD can set package loaded environment variable name, e.g., Sys.setenv(ALPHAMISSENSE_RECORD = \"8208688\"). default recent version (version 2) 25 September, 2023. am_data() uses BiocFileCache download store file corresponding DuckDB database.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/AlphaMissense.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve AlphaMissense Resources as DuckDB Databases — ALPHAMISSENSE_RECORD","text":"","code":"ALPHAMISSENSE_RECORD #> [1] \"8360242\"  if (interactive())     am_browse()  am_available() #> # A tibble: 7 × 5 #>   record  key                             size cached link                       #>   <chr>   <chr>                          <dbl> <lgl>  <chr>                      #> 1 8360242 aa_substitutions          1207278510 TRUE   https://zenodo.org/api/fi… #> 2 8360242 gene_hg19                     243943 TRUE   https://zenodo.org/api/fi… #> 3 8360242 gene_hg38                     253636 TRUE   https://zenodo.org/api/fi… #> 4 8360242 hg19                       622293310 TRUE   https://zenodo.org/api/fi… #> 5 8360242 hg38                       642961469 TRUE   https://zenodo.org/api/fi… #> 6 8360242 isoforms_aa_substitutions 2461351945 TRUE   https://zenodo.org/api/fi… #> 7 8360242 isoforms_hg38             1177361934 TRUE   https://zenodo.org/api/fi…  am_data(\"hg38\") #> # Source:   table<hg38> [?? x 10] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>    `#CHROM`   POS REF   ALT   genome uniprot_id transcript_id    protein_variant #>    <chr>    <dbl> <chr> <chr> <chr>  <chr>      <chr>            <chr>           #>  1 chr1     69094 G     T     hg38   Q8NH21     ENST00000335137… V2L             #>  2 chr1     69094 G     C     hg38   Q8NH21     ENST00000335137… V2L             #>  3 chr1     69094 G     A     hg38   Q8NH21     ENST00000335137… V2M             #>  4 chr1     69095 T     C     hg38   Q8NH21     ENST00000335137… V2A             #>  5 chr1     69095 T     A     hg38   Q8NH21     ENST00000335137… V2E             #>  6 chr1     69095 T     G     hg38   Q8NH21     ENST00000335137… V2G             #>  7 chr1     69097 A     G     hg38   Q8NH21     ENST00000335137… T3A             #>  8 chr1     69097 A     C     hg38   Q8NH21     ENST00000335137… T3P             #>  9 chr1     69097 A     T     hg38   Q8NH21     ENST00000335137… T3S             #> 10 chr1     69098 C     A     hg38   Q8NH21     ENST00000335137… T3N             #> # ℹ more rows #> # ℹ 2 more variables: am_pathogenicity <dbl>, am_class <chr>  ## close the connection opened when adding the data db_disconnect()"},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/db.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulate the Database of Missense Mutations — db_connect","title":"Manipulate the Database of Missense Mutations — db_connect","text":"db_connect() manages connections AlphaMissense record-specific databases. default, connections created reused. db_tables() queries names temporary regular tables defined database. db_temporary_table() creates temporary (duration duckdb connection) table tibble. db_range_join() performs range join, finding positions key within ranges defined join. result stored table . db_disconnect() disconnects duckdb database shuts DuckDB server associated connection. Temporary tables lost.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulate the Database of Missense Mutations — db_connect","text":"","code":"db_connect(   record = ALPHAMISSENSE_RECORD,   bfc = BiocFileCache(),   read_only = TRUE,   managed = read_only )  db_tables(db = db_connect())  db_temporary_table(db, value, to)  db_range_join(db, key, join, to)  db_disconnect(db = db_connect())"},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manipulate the Database of Missense Mutations — db_connect","text":"record character(1) Zenodo record AlphaMissense data resources. bfc object returned BiocFileCache() representing location downloaded files parsed database stored. default 'global' BiocFileCache. read_only logical(1) open connection 'read '. TRUE protects overwriting existing data default. managed logical(1) TRUE, re-use existing managed connection database. db duckdb_connection object, returned db_connect(). value data.frame / tibble containing data placed temporary table, e.g., GenomicRanges object used range join. character(1) name table created key character(1) table name db containing missense mutation coordinates. join character(1) table name db containing ranges used joining (filtering) key.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manipulate the Database of Missense Mutations — db_connect","text":"db_connect() returns open duckdb_connection AlphaMissense record-specific database. db_tables() returns character vector database table names. db_temporary_table() returns temporary table dbplyr tibble. db_range_join() returns (temporary table created join) dbplyr tibble. db_disconnect() returns FALSE connection already closed valid (via dbIsValid()) TRUE disconnection successful. Values returned invisibly.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/db.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manipulate the Database of Missense Mutations — db_connect","text":"db_connect(), set managed = FALSE , instance, accessing database separate process. Remember capture database connection db_unmanaged <- db_connect(managed = FALSE) disconnect done db_disconnect(db_unmanaged). Connections opened read_only = FALSE` managed, must also disconnected manually. db_temporary_table() overwrites existing table name . db_range_join() overwrites existing table name . table key usually \"hg19\" \"hg38\" must #CHROM POS columns. table join must columns #CHROM, start end. Following Bioconductor convention reported am_browse(), coordinates 1-based ranges defined start end closed. columns key join included, column names (#CHROM) duplicated. db_disconnect() called unmanaged connection, (free default managed connection) end session.","code":""},{"path":"https://mtmorgan.github.io/AlphaMissense/reference/db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manipulate the Database of Missense Mutations — db_connect","text":"","code":"db_connect()          # default 'read-only' connection #> <duckdb_connection b7840 driver=<duckdb_driver 500e0 dbdir='/Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac' read_only=TRUE bigint=numeric>>  db_rw <- db_connect(read_only = FALSE)  am_data(\"hg38\")       # uses the default, 'read-only' connection #> # Source:   table<hg38> [?? x 10] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>    `#CHROM`   POS REF   ALT   genome uniprot_id transcript_id    protein_variant #>    <chr>    <dbl> <chr> <chr> <chr>  <chr>      <chr>            <chr>           #>  1 chr1     69094 G     T     hg38   Q8NH21     ENST00000335137… V2L             #>  2 chr1     69094 G     C     hg38   Q8NH21     ENST00000335137… V2L             #>  3 chr1     69094 G     A     hg38   Q8NH21     ENST00000335137… V2M             #>  4 chr1     69095 T     C     hg38   Q8NH21     ENST00000335137… V2A             #>  5 chr1     69095 T     A     hg38   Q8NH21     ENST00000335137… V2E             #>  6 chr1     69095 T     G     hg38   Q8NH21     ENST00000335137… V2G             #>  7 chr1     69097 A     G     hg38   Q8NH21     ENST00000335137… T3A             #>  8 chr1     69097 A     C     hg38   Q8NH21     ENST00000335137… T3P             #>  9 chr1     69097 A     T     hg38   Q8NH21     ENST00000335137… T3S             #> 10 chr1     69098 C     A     hg38   Q8NH21     ENST00000335137… T3N             #> # ℹ more rows #> # ℹ 2 more variables: am_pathogenicity <dbl>, am_class <chr> db_tables()           # connections initially share the same tables #> [1] \"aa_substitutions\"          \"gene_hg19\"                 #> [3] \"gene_hg38\"                 \"hg19\"                      #> [5] \"hg38\"                      \"isoforms_aa_substitutions\" #> [7] \"isoforms_hg38\"             db_tables(db_rw) #> [1] \"aa_substitutions\"          \"gene_hg19\"                 #> [3] \"gene_hg38\"                 \"hg19\"                      #> [5] \"hg38\"                      \"isoforms_aa_substitutions\" #> [7] \"isoforms_hg38\"              ## ranges of interest -- the first 200000 bases on chromsomes 1-4. ranges <- tibble(     `#CHROM` = paste0(\"chr\", 1:4),     start = rep(1, 4),     end = rep(200000, 4) ) db_temporary_table(db_rw, ranges, \"ranges\") #> # Source:   table<ranges> [4 x 3] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>   `#CHROM` start    end #>   <chr>    <dbl>  <dbl> #> 1 chr1         1 200000 #> 2 chr2         1 200000 #> 3 chr3         1 200000 #> 4 chr4         1 200000  db_tables(db_rw)      # temporary table available to the db_rw connection... #> [1] \"aa_substitutions\"          \"gene_hg19\"                 #> [3] \"gene_hg38\"                 \"hg19\"                      #> [5] \"hg38\"                      \"isoforms_aa_substitutions\" #> [7] \"isoforms_hg38\"             \"ranges\"                    db_tables()           # ...but not to the read-only connection #> [1] \"aa_substitutions\"          \"gene_hg19\"                 #> [3] \"gene_hg38\"                 \"hg19\"                      #> [5] \"hg38\"                      \"isoforms_aa_substitutions\" #> [7] \"isoforms_hg38\"              rng <- db_range_join(db_rw, \"hg38\", \"ranges\", \"ranges_overlaps\") #> * [21:11:46][info] doing range join of 'hg38' with 'ranges' rng #> # Source:   table<ranges_overlaps> [?? x 12] #> # Database: DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #>    `#CHROM`   POS REF   ALT   genome uniprot_id transcript_id    protein_variant #>    <chr>    <dbl> <chr> <chr> <chr>  <chr>      <chr>            <chr>           #>  1 chr2     45769 G     T     hg38   Q1W6H9     ENST00000327669… S206Y           #>  2 chr2     45770 A     C     hg38   Q1W6H9     ENST00000327669… S206A           #>  3 chr2     45770 A     G     hg38   Q1W6H9     ENST00000327669… S206P           #>  4 chr2     45770 A     T     hg38   Q1W6H9     ENST00000327669… S206T           #>  5 chr2     45771 G     T     hg38   Q1W6H9     ENST00000327669… S205R           #>  6 chr2     45771 G     C     hg38   Q1W6H9     ENST00000327669… S205R           #>  7 chr2     45772 C     T     hg38   Q1W6H9     ENST00000327669… S205N           #>  8 chr2     45772 C     A     hg38   Q1W6H9     ENST00000327669… S205I           #>  9 chr2     45772 C     G     hg38   Q1W6H9     ENST00000327669… S205T           #> 10 chr2     45773 T     G     hg38   Q1W6H9     ENST00000327669… S205R           #> # ℹ more rows #> # ℹ 4 more variables: am_pathogenicity <dbl>, am_class <chr>, start <dbl>, #> #   end <dbl> rng |>     count(`#CHROM`) |>     arrange(`#CHROM`) #> # Source:     SQL [3 x 2] #> # Database:   DuckDB 0.8.1 [ma38727@Darwin 21.6.0:R 4.3.1//Users/ma38727/Library/Caches/org.R-project.R/R/BiocFileCache/dbb12417e9ac_dbb12417e9ac] #> # Ordered by: `#CHROM` #>   `#CHROM`     n #>   <chr>    <dbl> #> 1 chr1      2018 #> 2 chr2      2028 #> 3 chr4      7488  db_disconnect(db_rw)  # required for each non-'managed' connection db_disconnect()       # required once per session"}]
